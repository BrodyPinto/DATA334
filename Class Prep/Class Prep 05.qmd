---
title: "Class Prep 05"
author: "Brody Pinto"
format: 
  html:
    embed-resources: true
---

## Section 5.1
```{r}
library(tidyverse)
library(here)
theme_set(theme_minimal())
hpi_df <- read_csv(here("data/hpi-tidy.csv"))
hpi_df

ggplot(data = hpi_df, aes(x = Footprint, y = Wellbeing)) +
  geom_point()

hpi_us <- hpi_df |> filter(Country == "United States of America")
hpi_us

ggplot(data = hpi_df, aes(x = Footprint, y = Wellbeing)) +
  geom_point() +
  geom_text(data = hpi_us, aes(label = Country)) ## specify

## install.packages("ggrepel")
library(ggrepel)
ggplot(data = hpi_df, aes(x = Footprint, y = Wellbeing)) +
  geom_point() +
  geom_text_repel(data = hpi_us, aes(label = Country)) +
  geom_point(data = hpi_us, size = 3, shape = 1) ## create a second point that is an open circle (shape = 1) with a larger size (size = 3) to surround the United States point on the scatterplot

ggplot(data = hpi_df, aes(x = Footprint, y = Wellbeing)) +
  geom_point() +
  geom_text_repel(data = hpi_us, aes(label = Country)) +
  geom_point(data = hpi_us, size = 3, shape = 1) +
  labs(title = "Countries with a Higher Ecological Footprint Tend to Have Citizens with Higher Wellbeing", ## add title
    subtitle = "Wellbeing is on a 1-10 scale", ## add subtitle (smaller text size than the title)
    caption = "Data Source: http://happyplanetindex.org/countries", ## add caption to the bottom of the figure
    x = "Ecological Footprint", ## change x axis label
    y = "Wellbeing") ## change y axis label
```

**Exercise 1:** For each of the core dplyr functions `mutate()`, `arrange()`, `select()`, `slice()`, `filter()`, `group_by()`, and `summarise()`, write a one sentence summary of the overall purpose of the function.

`mutate()` creates new variables or modifies existing ones within a dataset. `arrange()` rearranges rows based on one or more columns, either in ascending or descending order. `select()` isolates specific columns from a dataset. `slice()` isolates specific rows from a dataset based on their position or conditions. `filter()` extracts rows from a dataset that meet specified conditions. `group_by()` groups a dataset based on one or more variables. `summarise()` condenses data within grouped subsets using various functions.

**Exercise 2:** Review `mutate()`. Create a new variable in hpi_df that is equal to Wellbeing / Footprint.

```{r}
head(hpi_df |> 
       mutate(new_var = Wellbeing/Footprint))
```

**Exercise 3:** Review `mutate()` and `case_when()`. Create a new variable in hpi_df that is equal to "80s" if LifeExp is in the 80â€™s, "70s" if LifeExp is in the 70s, and "Below 70" if LifeExp is less than 70.

```{r}
head(hpi_df |>
       mutate(LifeExpCat = case_when(LifeExpectancy < 70 ~ "Below 70",
                                     LifeExpectancy >= 60 | LifeExpectancy < 70 ~ "70s",
                                     LifeExpectancy >= 70 | LifeExpectancy < 80 ~ "80s")))
```

**Exercise 4:** Review `arrange()`. Sort the hpi_df data so that the country with the highest LifeExp is in the first row and the country with the lowest LifeExp is in the last row.

```{r}
head(hpi_df |>
       arrange(desc(LifeExpectancy)))
```

**Exercise 5:** Review `select()`. Make a data frame from hpi_df that only has the variables Country and LifeExp.

```{r}
head(hpi_df |>
       select(Country, LifeExpectancy))
```


**Exercise 6:** Review `slice()`. Make a data frame from hpi_df that only has the first 5 rows.

```{r}
hpi_df |>
  slice(1:5)
```


**Exercise 7:** Review `filter()`. Make a data frame from hpi_df that only has countries in the "Western World" Region.

```{r}
head(hpi_df |>
       filter(Region == "Western World"))
```


**Exercise 8:** Review `filter()`. Make a data frame from hpi_df that only has countries with a LifeExp less than 55.

```{r}
head(hpi_df |>
       filter(LifeExpectancy < 55))
```


**Exercise 9:** Review `group_by()` and `summarise()`. Make a table of the number of countries in each Region. (Hint: recall that the `n()` function is the counting function in dplyr).

```{r}
hpi_df |>
  group_by(Region) |>
  summarise(total_countries = n())
```


**Exercise 10:** Review `group_by()` and `summarise()`. Make a table with the maximum LifeExp in each Region.

```{r}
hpi_df |>
  group_by(Region) |>
  summarise(max_life_expectancy = max(LifeExpectancy))
```





